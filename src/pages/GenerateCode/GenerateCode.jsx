import { useState, useEffect } from "react";
import axios from "axios";
import "./GenerateCode.css"; // S·ª≠ d·ª•ng file CSS m·ªõi
import { getUserInfo, getToken } from "../../compoment/auth";

export default function GenerateCode() {
  // State ƒë·ªÉ l∆∞u danh s√°ch chi·∫øn d·ªãch v√† chi·∫øn d·ªãch ƒëang ƒë∆∞·ª£c ch·ªçn
  const [campaigns, setCampaigns] = useState([]);
  const [selectedCampaign, setSelectedCampaign] = useState("");

  // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i v√† g·ª≠i d·ªØ li·ªáu
  const [loading, setLoading] = useState(true); // Tr·∫°ng th√°i t·∫£i danh s√°ch
  const [submitting, setSubmitting] = useState(false); // Tr·∫°ng th√°i khi b·∫•m n√∫t t·∫°o
  const [message, setMessage] = useState("");

  // L·∫•y th√¥ng tin c·∫ßn thi·∫øt
  const token = getToken();
  const user = getUserInfo();
  const kol_id = user?._id;

  // useEffect ƒë·ªÉ t·∫£i danh s√°ch c√°c chi·∫øn d·ªãch khi component ƒë∆∞·ª£c render
  useEffect(() => {
    const fetchCampaigns = async () => {
      if (!token) {
        setMessage("‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.");
        setLoading(false);
        return;
      }
      try {
        const res = await axios.get("/api/su-kien-giam-gia", {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (res.status === 200 && res.data.xemsukien) {
          setCampaigns(res.data.xemsukien);
        } else {
          setMessage("ü§∑‚Äç‚ôÇÔ∏è Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch n√†o.");
        }
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch chi·∫øn d·ªãch:", err);
        setMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch chi·∫øn d·ªãch.");
      } finally {
        setLoading(false);
      }
    };
    fetchCampaigns();
  }, [token]);

  // H√†m x·ª≠ l√Ω khi form ƒë∆∞·ª£c g·ª≠i ƒëi
  const handleSubmit = async (e) => {
    e.preventDefault(); // NgƒÉn trang t·∫£i l·∫°i

    if (!selectedCampaign) {
      setMessage("‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt chi·∫øn d·ªãch.");
      return;
    }

    setSubmitting(true);
    setMessage("");

    try {
      const payload = {
        kol_id: kol_id,
        campaign_id: selectedCampaign,
      };

      const res = await axios.post("/api/them-moi-ma-giam-gia-theo-su-kien", payload, {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      // Gi·∫£ s·ª≠ server tr·∫£ v·ªÅ m√£ m·ªõi trong `res.data.new_code`
      setMessage(`‚úÖ T·∫°o m√£ th√†nh c√¥ng! M√£ m·ªõi c·ªßa b·∫°n l√†: ${res.data.new_code}`);

    } catch (err) {
      console.error("L·ªói khi t·∫°o m√£:", err);
      const errorMessage = err.response?.data?.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.";
      setMessage(`‚ùå L·ªói: ${errorMessage}`);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return <div className="generate-code-container"><p>ƒêang t·∫£i danh s√°ch chi·∫øn d·ªãch...</p></div>;
  }

  return (
    <div className="generate-code-container">
      <form onSubmit={handleSubmit}>
        <h2>‚ú® T·∫°o M√£ Gi·∫£m Gi√° M·ªõi</h2>
        
        <label htmlFor="campaign-select">Ch·ªçn chi·∫øn d·ªãch tham gia:</label>
        <select 
          id="campaign-select"
          value={selectedCampaign}
          onChange={(e) => setSelectedCampaign(e.target.value)}
          disabled={campaigns.length === 0}
        >
          <option value="">-- Vui l√≤ng ch·ªçn --</option>
          {campaigns.map((campaign) => (
            <option key={campaign.id} value={campaign.id}>
              {campaign.name}
            </option>
          ))}
        </select>
        
        <button type="submit" disabled={submitting || !selectedCampaign}>
          {submitting ? 'ƒêang t·∫°o...' : 'üöÄ T·∫°o M√£'}
        </button>

        {message && <p className="message">{message}</p>}
      </form>
    </div>
  );
}